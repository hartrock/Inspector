;; Note: to be mixed-in with overwrite after, or without overwrite only *before*
;; LoggerDebug.
(context 'LoggerTweakable)

;; for LoggerDebug -> needs overwrite or being first
(set 'symbols-to-be-switched
       ;; not defined as tweakable below
     '(msg msg-loc LoggerTweakable:begin end wrap
       ;; expr-str[-sep][_tweaked] not to be switched
       expr expr_tweaked expr-loc expr-loc_tweaked
       expr-sep expr-sep_tweaked expr-loc-sep expr-loc-sep_tweaked
       info info-loc) ; not defined as tweakable below
     'symbols-to-be-switched-store (Util:add-prefix-to-syms
                                    "_"
                                    symbols-to-be-switched))
;; use empty non-evaluating macros for switched off versions
(dolist (s symbols-to-be-switched-store)
        (set s (lambda-macro ())))


;;
;; for LoggerExpr

(set 'toBeTweakedSyms
     '(expr expr-loc expr-sep expr-loc-sep expr-str expr-str-sep)
     'toBeTweakedStrs
     (map term toBeTweakedSyms))

;; Calls to *_tweaked variants are automatically generated by tweaking calls of
;; untweaked variants (lib/tweak.lsp): this changes
;; - caller name (by adding suffix _tweaked);
;; - caller args (by adding programmatically generated location info (tloc));
;; - and more (to get an evaluation of expressions like (args) in the correct
;;   environment).

(define-macro (expr-str_tweaked tloc)
  (expr-info-string-tloc tloc (args)))
(define-macro (expr-str-sep_tweaked tloc)
  (expr-info-string-tloc tloc (args) true))

(define-macro (expr_tweaked tloc)
  (:msg-loc (context)
            (tloc2string tloc)
            (expr-info-string (args)))
  lastExprEval) ;)
(define-macro (expr-loc_tweaked tloc (locStrOrSym ""))
  (:msg-loc (context)
            (string (tloc2string tloc) " " (string (eval locStrOrSym)))
            (expr-info-string (args)))
  lastExprEval) ;)
;;
(define-macro (expr-sep_tweaked tloc)
  (:msg-loc (context)
            (tloc2string tloc)
            (expr-info-string (args) true))
  lastExprEval) ;)
(define-macro (expr-loc-sep_tweaked tloc (locStrOrSym ""))
  (:msg-loc (context)
            (string (tloc2string tloc) " " (string (eval locStrOrSym)))
            (expr-info-string (args) true))
  lastExprEval)


(context MAIN) ; ...LoggerTweakable
